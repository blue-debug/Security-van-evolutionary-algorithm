Task aim:
What you will do in this assignment is to implement an evolutionary algorithm and apply it to the problem shown below. You will do a variety of experiments to help find out what parameters for the algorithm are best for this problem. Implementation of the algorithm can be in the programming language of your choice. In the following sections, details of the problem are provided, then basic details of the algorithm, and finally a description of the experiments you should carry out. The final section indicates what should be in your report to be handed in.

Environment for experiment
Window 11 family vision
Vscode python 3.9.3

Contain of experiment

The Evolutionary Algorithm
The evolutionary algorithm should be implemented as follows:
1. Generate an initial population of p randomly generated solutions (where p is a reasonable
population size discussed in lectures and in the module reading), and evaluate the fitness of
everything in the population.
2. Use the binary tournament selection twice (with replacement) to select two parents a and b.
3. Run crossover on these parents to give 2 children, c and d.
4. Run mutation on c and d to give two new solutions e and f. Evaluate the fitness of e and f.
5. Run weakest replacement, first using e, then f.
6. If a termination criterion has been reached, then stop. Otherwise return to step 2.
Termination Criterion: Will simply be having reached a maximum number of fitness evaluations which s 10,000 (see Implementation and Experimentation below) 

Binary Tournament Selection: Randomly choose a chromosome from the population; call it a. Randomly choose another chromosome from the population; call this b. The fittest of these two (breaking ties randomly) becomes the selected parent. 

Single-Point Crossover: Randomly select a ‘crossover point’ which should be smaller than the total length of the chromosome. Take the two parents and swap the gene values between them ONLY for those genes which appear AFTER the crossover point to create two new children.

Mutation: This is dependent on your representation, look at the lecture slides for some ideas on which mutation to implement given your representation. Your mutation function must take a single integer parameter which will determine how many times it is repeated on a solution (e.g., M(1) – one mutation per chromosome, M(3) – 3 mutations).

Weakest Replacement: If the new solution is fitter than the worst in the population, then overwrite the worst (breaking ties randomly) with the new solution.


Code fulfills


Test and consider of the experiment

Some parameters may influence the performance of the optimization in this experiment.

1. Tournament size(t)

2. Population size (p)
The table below shows that 10 times different outputs(Max values) are based on different pop.
times	Pop(10)	Pop(50)	Pop(100)	Pop(500)
1	3949	3613	3869	3512
2	4003	3732	3682	3530
3	3784	3678	3629	3497
4	3561	3943	3863	3601
5	4062	3620	3827	
6	3784	3712	3762	
7	4003	3889	3817	
8	3843	3743	3849	
9	3644	3837	3763	
10	3729	3935	3791	


3. Mutation rate (i.e. the parameter identified in the mutation operator above) (m)

Further discussion

Question 1: Which combination of parameters produces the best results?


Question 2: Why do you think this is the case?

Question 3: What was the effect when you removed mutation? What about crossover?


Question 4: If you were to extend your EA to work with a multi-objective version of this problem, which functions in your program would you change and why?
I think it must be a function of fitness() because this function is the core of the whole program and this function can effectively judge the result of the population whether it is good or bad. Therefore, redesigning this function to improve this program is quite important.

